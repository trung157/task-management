openapi: 3.0.3
info:
  title: TaskFlow API
  description: |
    Comprehensive REST API for TaskFlow task management system.
    
    Features:
    - JWT-based authentication with refresh tokens
    - Complete task CRUD operations with advanced filtering
    - Full-text search across tasks, categories, and tags
    - Real-time notifications and collaboration features
    - Analytics and productivity insights
    - Bulk operations and data import/export
    
    ## Authentication
    All endpoints (except auth endpoints) require a valid JWT Bearer token in the Authorization header.
    
    ## Rate Limiting
    - Default: 100 requests per minute per user
    - Burst: 20 requests per 10 seconds
    - Headers: X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset
    
    ## Error Handling
    All errors follow a consistent format with success/error indicators, error codes, and detailed messages.
  version: 1.0.0
  contact:
    name: TaskFlow API Support
    email: api-support@taskflow.com
    url: https://docs.taskflow.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://taskflow.com/terms

servers:
  - url: https://api.taskflow.com/v1
    description: Production server
  - url: https://staging-api.taskflow.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - bearerAuth: []

paths:
  # ===============================
  # Authentication Endpoints
  # ===============================
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email verification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: "user@example.com"
              password: "securePassword123"
              first_name: "John"
              last_name: "Doe"
              timezone: "America/New_York"
              language_code: "en"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate tokens
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password using token from email
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  # ===============================
  # User Management Endpoints
  # ===============================
  /users/profile:
    get:
      tags:
        - User Management
      summary: Get user profile
      description: Get current user's profile information
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===============================
  # Task Management Endpoints
  # ===============================
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks
      description: Get user's tasks with filtering, search, and pagination
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: Filter by task status
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - name: priority
          in: query
          description: Filter by task priority
          schema:
            $ref: '#/components/schemas/TaskPriority'
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: string
            format: uuid
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
            example: "urgent,work"
        - name: due_date_from
          in: query
          description: Tasks due after this date
          schema:
            type: string
            format: date-time
        - name: due_date_to
          in: query
          description: Tasks due before this date
          schema:
            type: string
            format: date-time
        - name: search
          in: query
          description: Full-text search query
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [created_at, updated_at, due_date, title, priority, status]
            default: created_at
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: include_completed
          in: query
          description: Include completed tasks
          schema:
            type: boolean
            default: false
        - name: overdue_only
          in: query
          description: Only show overdue tasks
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Tasks
      summary: Create task
      description: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Task ID
        schema:
          type: string
          format: uuid

    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Get detailed task information including comments and history
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTaskResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update task information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags:
        - Tasks
      summary: Partially update task
      description: Update specific task fields
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Soft delete a task
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ===============================
  # Category Management Endpoints
  # ===============================
  /categories:
    get:
      tags:
        - Categories
      summary: Get categories
      description: Get user's categories with optional statistics
      parameters:
        - name: include_stats
          in: query
          description: Include task statistics
          schema:
            type: boolean
            default: false
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, created_at, task_count]
            default: name
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Categories
      summary: Create category
      description: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Category ID
        schema:
          type: string
          format: uuid

    put:
      tags:
        - Categories
      summary: Update category
      description: Update category information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Categories
      summary: Delete category
      description: Delete a category and optionally move tasks
      parameters:
        - name: move_tasks_to
          in: query
          description: Category ID to move tasks to
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ===============================
  # Search Endpoints
  # ===============================
  /search:
    get:
      tags:
        - Search
      summary: Global search
      description: Search across tasks, categories, and tags
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
        - name: type
          in: query
          description: Search type filter
          schema:
            type: string
            enum: [tasks, categories, tags, all]
            default: all
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Search results retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===============================
  # Analytics Endpoints
  # ===============================
  /analytics/dashboard:
    get:
      tags:
        - Analytics
      summary: Get dashboard analytics
      description: Get productivity metrics and task statistics
      parameters:
        - name: period
          in: query
          description: Time period for analytics
          schema:
            type: string
            enum: [today, week, month, quarter, year]
            default: week
        - name: timezone
          in: query
          description: User timezone for date calculations
          schema:
            type: string
            default: UTC
      responses:
        '200':
          description: Analytics data retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAnalyticsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===============================
  # Notification Endpoints
  # ===============================
  /notifications:
    get:
      tags:
        - Notifications
      summary: Get notifications
      description: Get user notifications with filtering and pagination
      parameters:
        - name: unread_only
          in: query
          description: Only show unread notifications
          schema:
            type: boolean
            default: false
        - name: type
          in: query
          description: Filter by notification type
          schema:
            $ref: '#/components/schemas/NotificationType'
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Notifications retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

# ===============================
# Components
# ===============================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token

  schemas:
    # ===============================
    # Enum Types
    # ===============================
    TaskStatus:
      type: string
      enum: [pending, in_progress, completed, archived]
      description: Task status enumeration

    TaskPriority:
      type: string
      enum: [high, medium, low, none]
      description: Task priority enumeration

    UserRole:
      type: string
      enum: [user, admin, super_admin]
      description: User role enumeration

    UserStatus:
      type: string
      enum: [active, inactive, suspended, pending_verification]
      description: User account status enumeration

    NotificationType:
      type: string
      enum: [due_date_reminder, task_assigned, task_completed, system_update]
      description: Notification type enumeration

    # ===============================
    # Base Schemas
    # ===============================
    BaseResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            message:
              type: string
              description: Success message

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - error
          properties:
            success:
              type: boolean
              enum: [false]
            error:
              type: object
              required:
                - code
                - message
              properties:
                code:
                  type: string
                  description: Error code
                message:
                  type: string
                  description: Error message
                details:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      message:
                        type: string
                request_id:
                  type: string
                  description: Unique request identifier

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          minimum: 1
        per_page:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        total_pages:
          type: integer
          minimum: 0
        has_next:
          type: boolean
        has_prev:
          type: boolean

    # ===============================
    # User Schemas
    # ===============================
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier
        email:
          type: string
          format: email
          description: User email address
        first_name:
          type: string
          maxLength: 100
          description: User first name
        last_name:
          type: string
          maxLength: 100
          description: User last name
        display_name:
          type: string
          description: Full display name
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: Profile picture URL
        bio:
          type: string
          nullable: true
          description: User biography
        timezone:
          type: string
          default: UTC
          description: User timezone
        date_format:
          type: string
          default: YYYY-MM-DD
          description: Preferred date format
        time_format:
          type: string
          default: 24h
          description: Preferred time format
        language_code:
          type: string
          default: en
          description: Language preference
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          $ref: '#/components/schemas/UserStatus'
        email_verified:
          type: boolean
          description: Email verification status
        preferences:
          type: object
          description: User preferences
        notification_settings:
          type: object
          description: Notification preferences
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    # ===============================
    # Task Schemas
    # ===============================
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Task unique identifier
        title:
          type: string
          maxLength: 255
          description: Task title
        description:
          type: string
          nullable: true
          description: Task description
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        due_date:
          type: string
          format: date-time
          nullable: true
          description: Task due date
        reminder_date:
          type: string
          format: date-time
          nullable: true
          description: Reminder date
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Task start date
        estimated_minutes:
          type: integer
          minimum: 1
          nullable: true
          description: Estimated time in minutes
        actual_minutes:
          type: integer
          minimum: 0
          nullable: true
          description: Actual time spent in minutes
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: Completion timestamp
        tags:
          type: array
          items:
            type: string
          description: Task tags
        category:
          $ref: '#/components/schemas/Category'
          nullable: true
        metadata:
          type: object
          description: Additional task metadata
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    # ===============================
    # Category Schemas
    # ===============================
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Category unique identifier
        name:
          type: string
          maxLength: 100
          description: Category name
        description:
          type: string
          nullable: true
          description: Category description
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Hex color code
        icon:
          type: string
          description: Icon identifier
        is_default:
          type: boolean
          description: Default category flag
        sort_order:
          type: integer
          description: Display order
        task_count:
          type: integer
          minimum: 0
          description: Number of tasks in category
        completed_task_count:
          type: integer
          minimum: 0
          description: Number of completed tasks
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    # ===============================
    # Request Schemas
    # ===============================
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          minLength: 8
          description: User password
        first_name:
          type: string
          maxLength: 100
          description: User first name
        last_name:
          type: string
          maxLength: 100
          description: User last name
        timezone:
          type: string
          default: UTC
          description: User timezone
        language_code:
          type: string
          default: en
          description: Language preference

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          description: User password
        remember_me:
          type: boolean
          default: false
          description: Extended session flag

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User email address

    ResetPasswordRequest:
      type: object
      required:
        - token
        - new_password
      properties:
        token:
          type: string
          description: Password reset token
        new_password:
          type: string
          minLength: 8
          description: New password

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        bio:
          type: string
        timezone:
          type: string
        preferences:
          type: object
        notification_settings:
          type: object

    CreateTaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          maxLength: 255
          description: Task title
        description:
          type: string
          description: Task description
        priority:
          $ref: '#/components/schemas/TaskPriority'
        status:
          $ref: '#/components/schemas/TaskStatus'
        category_id:
          type: string
          format: uuid
          description: Category ID
        due_date:
          type: string
          format: date-time
          description: Task due date
        reminder_date:
          type: string
          format: date-time
          description: Reminder date
        start_date:
          type: string
          format: date-time
          description: Task start date
        estimated_minutes:
          type: integer
          minimum: 1
          description: Estimated time in minutes
        tags:
          type: array
          items:
            type: string
          description: Task tags
        metadata:
          type: object
          description: Additional metadata

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
        priority:
          $ref: '#/components/schemas/TaskPriority'
        status:
          $ref: '#/components/schemas/TaskStatus'
        category_id:
          type: string
          format: uuid
        due_date:
          type: string
          format: date-time
        reminder_date:
          type: string
          format: date-time
        start_date:
          type: string
          format: date-time
        estimated_minutes:
          type: integer
          minimum: 1
        actual_minutes:
          type: integer
          minimum: 0
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object

    PatchTaskRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        actual_minutes:
          type: integer
          minimum: 0

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Category name
        description:
          type: string
          description: Category description
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Hex color code
        icon:
          type: string
          description: Icon identifier
        is_default:
          type: boolean
          description: Default category flag

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        icon:
          type: string

    # ===============================
    # Response Schemas
    # ===============================
    RegisterResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            message:
              type: string
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                access_token:
                  type: string
                  description: JWT access token
                refresh_token:
                  type: string
                  description: Refresh token
                expires_in:
                  type: integer
                  description: Token expiration in seconds
                token_type:
                  type: string
                  enum: [Bearer]
                user:
                  $ref: '#/components/schemas/User'

    RefreshTokenResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                access_token:
                  type: string
                expires_in:
                  type: integer
                token_type:
                  type: string
                  enum: [Bearer]

    UserProfileResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/User'

    TaskResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Task'

    TasksResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                tasks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
                pagination:
                  $ref: '#/components/schemas/Pagination'
                filters_applied:
                  type: object
                  description: Applied filters
                summary:
                  type: object
                  properties:
                    total_tasks:
                      type: integer
                    pending:
                      type: integer
                    in_progress:
                      type: integer
                    completed:
                      type: integer
                    overdue:
                      type: integer

    DetailedTaskResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/Task'
                - type: object
                  properties:
                    assignments:
                      type: array
                      items:
                        type: object
                    comments:
                      type: array
                      items:
                        type: object
                    history:
                      type: array
                      items:
                        type: object

    CategoryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Category'

    CategoriesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Category'

    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                query:
                  type: string
                results:
                  type: object
                  properties:
                    tasks:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/Task'
                          - type: object
                            properties:
                              relevance_score:
                                type: number
                                format: float
                              matched_fields:
                                type: array
                                items:
                                  type: string
                              highlighted_text:
                                type: string
                    categories:
                      type: array
                      items:
                        $ref: '#/components/schemas/Category'
                    tags:
                      type: array
                      items:
                        type: object
                pagination:
                  $ref: '#/components/schemas/Pagination'
                search_suggestions:
                  type: array
                  items:
                    type: string

    DashboardAnalyticsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                summary:
                  type: object
                  properties:
                    total_tasks:
                      type: integer
                    completed_tasks:
                      type: integer
                    pending_tasks:
                      type: integer
                    in_progress_tasks:
                      type: integer
                    overdue_tasks:
                      type: integer
                    completion_rate:
                      type: number
                      format: float
                    average_completion_time_hours:
                      type: number
                      format: float
                productivity_trend:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date
                      tasks_completed:
                        type: integer
                      tasks_created:
                        type: integer
                      time_spent_hours:
                        type: number
                        format: float
                category_breakdown:
                  type: array
                  items:
                    type: object
                    properties:
                      category:
                        type: string
                      total_tasks:
                        type: integer
                      completed_tasks:
                        type: integer
                      completion_rate:
                        type: number
                        format: float
                priority_distribution:
                  type: object
                  properties:
                    high:
                      type: integer
                    medium:
                      type: integer
                    low:
                      type: integer
                    none:
                      type: integer
                upcoming_deadlines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      due_date:
                        type: string
                        format: date-time
                      days_until_due:
                        type: integer
                      priority:
                        $ref: '#/components/schemas/TaskPriority'

    NotificationsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                notifications:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        $ref: '#/components/schemas/NotificationType'
                      title:
                        type: string
                      message:
                        type: string
                      data:
                        type: object
                      read_at:
                        type: string
                        format: date-time
                        nullable: true
                      action_url:
                        type: string
                        nullable: true
                      created_at:
                        type: string
                        format: date-time
                unread_count:
                  type: integer
                pagination:
                  $ref: '#/components/schemas/Pagination'

  # ===============================
  # Response Templates
  # ===============================
  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid input data"
              details:
                - field: "email"
                  message: "Invalid email format"
              request_id: "req-550e8400-e29b-41d4"

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "AUTHENTICATION_ERROR"
              message: "Invalid or expired token"
              request_id: "req-550e8400-e29b-41d4"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "RESOURCE_NOT_FOUND"
              message: "Task not found"
              request_id: "req-550e8400-e29b-41d4"

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TooManyRequests:
      description: Too many requests - rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when rate limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

# ===============================
# Tags for Organization
# ===============================
tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: User Management
    description: User profile and account management
  - name: Tasks
    description: Task CRUD operations and management
  - name: Categories
    description: Task category management
  - name: Search
    description: Search and discovery features
  - name: Analytics
    description: Analytics and reporting endpoints
  - name: Notifications
    description: Notification management

# ===============================
# External Documentation
# ===============================
externalDocs:
  description: TaskFlow API Documentation
  url: https://docs.taskflow.com/api
